Version 3.2 HI-TECH Software Intermediate Code
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 28: typedef signed short long int int24_t;
[; ;stdint.h: 36: typedef signed long int int32_t;
[; ;stdint.h: 43: typedef unsigned char uint8_t;
[; ;stdint.h: 49: typedef unsigned int uint16_t;
[; ;stdint.h: 56: typedef unsigned short long int uint24_t;
[; ;stdint.h: 63: typedef unsigned long int uint32_t;
[; ;stdint.h: 71: typedef signed char int_least8_t;
[; ;stdint.h: 78: typedef signed int int_least16_t;
[; ;stdint.h: 90: typedef signed short long int int_least24_t;
[; ;stdint.h: 98: typedef signed long int int_least32_t;
[; ;stdint.h: 105: typedef unsigned char uint_least8_t;
[; ;stdint.h: 111: typedef unsigned int uint_least16_t;
[; ;stdint.h: 121: typedef unsigned short long int uint_least24_t;
[; ;stdint.h: 128: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 137: typedef signed char int_fast8_t;
[; ;stdint.h: 144: typedef signed int int_fast16_t;
[; ;stdint.h: 156: typedef signed short long int int_fast24_t;
[; ;stdint.h: 164: typedef signed long int int_fast32_t;
[; ;stdint.h: 171: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 177: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 187: typedef unsigned short long int uint_fast24_t;
[; ;stdint.h: 194: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 200: typedef int32_t intmax_t;
[; ;stdint.h: 205: typedef uint32_t uintmax_t;
[; ;stdint.h: 210: typedef int16_t intptr_t;
[; ;stdint.h: 215: typedef uint16_t uintptr_t;
[; ;line_parser.h: 6: uint8_t line_parser(char *line, char delim);
[; ;line_parser.h: 7: uint8_t get_field(char *field, uint8_t N);
[; ;line_parser.h: 8: uint8_t is_line_field_num(uint8_t N);
"13 line_parser.c
[v _line_buf `uc ~T0 @X0 -> 100 `i s ]
[; ;line_parser.c: 13: static char line_buf[100];
"14
[v _field_offsets `uc ~T0 @X0 -> 30 `i s ]
[; ;line_parser.c: 14: static char field_offsets[30];
"74
[v _line_parser `(uc ~T0 @X0 1 ef2`*uc`uc ]
{
[; ;line_parser.c: 74: uint8_t line_parser(char *line, char delim){
[e :U _line_parser ]
[v _line `*uc ~T0 @X0 1 r1 ]
[v _delim `uc ~T0 @X0 1 r2 ]
[f ]
"76
[v _i `uc ~T0 @X0 1 a ]
[; ;line_parser.c: 76: uint8_t i = 0;
[e = _i -> -> 0 `i `uc ]
"77
[v _field_ctr `uc ~T0 @X0 1 a ]
[; ;line_parser.c: 77: uint8_t field_ctr = 1;
[e = _field_ctr -> -> 1 `i `uc ]
[; ;line_parser.c: 79: field_offsets[0] = 0;
"79
[e = *U + &U _field_offsets * -> -> -> 0 `i `ui `ux -> -> # *U &U _field_offsets `ui `ux -> -> 0 `i `uc ]
[; ;line_parser.c: 81: if(*line == 0x00){
"81
[e $ ! == -> *U _line `i -> 0 `i 2  ]
{
[; ;line_parser.c: 82: line_buf[0] = 0x00;
"82
[e = *U + &U _line_buf * -> -> -> 0 `i `ui `ux -> -> # *U &U _line_buf `ui `ux -> -> 0 `i `uc ]
[; ;line_parser.c: 83: return 0;
"83
[e ) -> -> 0 `i `uc ]
[e $UE 1  ]
"84
}
[e :U 2 ]
[; ;line_parser.c: 84: }
[; ;line_parser.c: 86: while(i < 100 - 1){
"86
[e $U 3  ]
[e :U 4 ]
{
[; ;line_parser.c: 87: if(*line == delim){
"87
[e $ ! == -> *U _line `i -> _delim `i 6  ]
{
[; ;line_parser.c: 88: line_buf[i] = 0x00;
"88
[e = *U + &U _line_buf * -> _i `ux -> -> # *U &U _line_buf `ui `ux -> -> 0 `i `uc ]
[; ;line_parser.c: 89: field_offsets[field_ctr] = i + 1;
"89
[e = *U + &U _field_offsets * -> _field_ctr `ux -> -> # *U &U _field_offsets `ui `ux -> + -> _i `i -> 1 `i `uc ]
[; ;line_parser.c: 90: field_ctr++;
"90
[e ++ _field_ctr -> -> 1 `i `uc ]
"91
}
[; ;line_parser.c: 91: }
[e $U 7  ]
"92
[e :U 6 ]
[; ;line_parser.c: 92: else{
{
[; ;line_parser.c: 93: line_buf[i] = *line;
"93
[e = *U + &U _line_buf * -> _i `ux -> -> # *U &U _line_buf `ui `ux *U _line ]
"94
}
[e :U 7 ]
[; ;line_parser.c: 94: }
[; ;line_parser.c: 95: line++;
"95
[e ++ _line * -> -> 1 `i `x -> -> # *U _line `i `x ]
[; ;line_parser.c: 96: i++;
"96
[e ++ _i -> -> 1 `i `uc ]
[; ;line_parser.c: 97: if(*line == 0x00)
"97
[e $ ! == -> *U _line `i -> 0 `i 8  ]
[; ;line_parser.c: 98: break;
"98
[e $U 5  ]
[e :U 8 ]
"99
}
[e :U 3 ]
"86
[e $ < -> _i `i - -> 100 `i -> 1 `i 4  ]
[e :U 5 ]
[; ;line_parser.c: 99: }
[; ;line_parser.c: 101: line_buf[i] = 0x00;
"101
[e = *U + &U _line_buf * -> _i `ux -> -> # *U &U _line_buf `ui `ux -> -> 0 `i `uc ]
[; ;line_parser.c: 102: return field_ctr;
"102
[e ) _field_ctr ]
[e $UE 1  ]
[; ;line_parser.c: 104: }
"104
[e :UE 1 ]
}
"108
[v _get_field `(uc ~T0 @X0 1 ef2`*uc`uc ]
{
[; ;line_parser.c: 108: uint8_t get_field(char *field, uint8_t N){
[e :U _get_field ]
[v _field `*uc ~T0 @X0 1 r1 ]
[v _N `uc ~T0 @X0 1 r2 ]
[f ]
"110
[v _i `uc ~T0 @X0 1 a ]
[; ;line_parser.c: 110: uint8_t i = field_offsets[N - 1];
[e = _i *U + &U _field_offsets * -> -> - -> _N `i -> 1 `i `ui `ux -> -> # *U &U _field_offsets `ui `ux ]
"111
[v _cnt `uc ~T0 @X0 1 a ]
[; ;line_parser.c: 111: uint8_t cnt = 0;
[e = _cnt -> -> 0 `i `uc ]
[; ;line_parser.c: 113: while(i < 100 - 1){
"113
[e $U 10  ]
[e :U 11 ]
{
[; ;line_parser.c: 114: *field = line_buf[i];
"114
[e = *U _field *U + &U _line_buf * -> _i `ux -> -> # *U &U _line_buf `ui `ux ]
[; ;line_parser.c: 115: if (line_buf[i] == 0x00){
"115
[e $ ! == -> *U + &U _line_buf * -> _i `ux -> -> # *U &U _line_buf `ui `ux `i -> 0 `i 13  ]
{
[; ;line_parser.c: 116: break;
"116
[e $U 12  ]
"117
}
[e :U 13 ]
[; ;line_parser.c: 117: }
[; ;line_parser.c: 118: cnt++;
"118
[e ++ _cnt -> -> 1 `i `uc ]
[; ;line_parser.c: 119: field++;
"119
[e ++ _field * -> -> 1 `i `x -> -> # *U _field `i `x ]
[; ;line_parser.c: 120: i++;
"120
[e ++ _i -> -> 1 `i `uc ]
"121
}
[e :U 10 ]
"113
[e $ < -> _i `i - -> 100 `i -> 1 `i 11  ]
[e :U 12 ]
[; ;line_parser.c: 121: }
[; ;line_parser.c: 122: *field = 0x00;
"122
[e = *U _field -> -> 0 `i `uc ]
[; ;line_parser.c: 123: return cnt;
"123
[e ) _cnt ]
[e $UE 9  ]
[; ;line_parser.c: 124: }
"124
[e :UE 9 ]
}
"130
[v _is_line_field_num `(uc ~T0 @X0 1 ef1`uc ]
{
[; ;line_parser.c: 130: uint8_t is_line_field_num(uint8_t N){
[e :U _is_line_field_num ]
[v _N `uc ~T0 @X0 1 r1 ]
[f ]
"132
[v _result `uc ~T0 @X0 1 a ]
[; ;line_parser.c: 132: uint8_t result = 0x01;
[e = _result -> -> 1 `i `uc ]
[; ;line_parser.c: 142: return result;
"142
[e ) _result ]
[e $UE 14  ]
[; ;line_parser.c: 143: }
"143
[e :UE 14 ]
}
