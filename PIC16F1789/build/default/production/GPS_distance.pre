
# 1 "GPS_distance.c"

# 30 "/opt/microchip/xc8/v1.35/include/math.h"
extern double fabs(double);
extern double floor(double);
extern double ceil(double);
extern double modf(double, double *);
extern double sqrt(double);
extern double atof(const char *);
extern double sin(double) ;
extern double cos(double) ;
extern double tan(double) ;
extern double asin(double) ;
extern double acos(double) ;
extern double atan(double);
extern double atan2(double, double) ;
extern double log(double);
extern double log10(double);
extern double pow(double, double) ;
extern double exp(double) ;
extern double sinh(double) ;
extern double cosh(double) ;
extern double tanh(double);
extern double eval_poly(double, const double *, int);
extern double frexp(double, int *);
extern double ldexp(double, int);
extern double fmod(double, double);
extern double trunc(double);
extern double round(double);

# 40 "GPS_distance.c"
double deg2rad(double deg) {
return (deg * 3.14159265358979323846 / 180);
}




double rad2deg(double rad) {
return (rad * 180 / 3.14159265358979323846);
}

# 56
double distance(double lat1, double lon1, double lat2, double lon2, char unit) {
double theta, dist;
theta = lon1 - lon2;
dist = sin(deg2rad(lat1)) * sin(deg2rad(lat2)) + cos(deg2rad(lat1)) * cos(deg2rad(lat2)) * cos(deg2rad(theta));
dist = acos(dist);
dist = rad2deg(dist);
dist = dist * 60 * 1.1515;
switch(unit) {
case 'M':
break;
case 'K':
dist = dist * 1.609344;
break;
case 'N':
dist = dist * 0.8684;
break;
}
return (dist);
}

# 84
double heading(double lat1, double lon1, double lat2, double lon2){

double a = deg2rad(lat1);
double b = deg2rad(lon1);
double c = deg2rad(lat2);
double d = deg2rad(lon2);

if (cos(c) * sin(d - b) == 0){
if (c > a)
return 0;
else
return 180;
}
else
{
double angle = atan2(cos(c) * sin(d - b), sin(c) * cos(a) - sin(a) * cos(c) * cos(d - b));
return fmod( (angle * 180 / 3.14159265358979323846 + 360), 360 );
}
}
